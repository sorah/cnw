#!/usr/bin/env ruby
require 'socket'
require 'json'

def zabbix_send(data)
  if File.read('/etc/zabbix/zabbix_agentd.conf').each_line.grep(/^Hostname=/).empty?
    host = Socket.gethostname
  else
    host = '-'
  end
  IO.popen(['zabbix_sender', '-c', '/etc/zabbix/zabbix_agentd.conf', '-i', '-'], 'w') do |io|
    data.each do |v|
      line = "#{host}\t#{v.join(?\t)}"
      puts line
      io.puts line
    end
    io.close_write
  end
end

begin
  v6 = ARGV.delete('-6')

  host = ARGV[0]
  abort unless host

  out = IO.popen([v6 ? 'ping6' : 'ping', '-q', '-i', '0.2', '-w', '15', host], 'r', &:read)
  stat = {}
  stat.merge! out.match(/(?<pkts>\d+) packets transmitted, (?<rcvd>\d+) received(?:, \+(?<dup>\d+) duplicates)?(?:, \+(?<corrupt>\d+) corrupted)?(?:, \+(?<error>\d+) errors)?, (?<loss>[\d.]+)% packet loss/).named_captures
  rtt_stat = out.match(%r{rtt min/avg/max/mdev = (?<min>[\d.]+)/(?<avg>\g<min>)/(?<max>\g<min>)/(?<mdev>\g<min>) ms})&.named_captures
  if rtt_stat
    stat.merge! rtt_stat
  end

  data = stat.map { |k,v|
    ["autoping.stats.#{k}[#{host}]", v || 0]
  }

  zabbix_send(data)
  puts '0'
rescue Exception
  puts '1'
  raise
end
