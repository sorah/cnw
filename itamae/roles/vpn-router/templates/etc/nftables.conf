#!/usr/bin/nft -f
flush ruleset

define port_ssh = { <%= node[:ssh][:port].join(', ') %> }
define iface_remote = "vti_*";

define iface_world = <%= node[:vpn_router][:iface][:world] %>;
define iface_core = <%= node[:vpn_router][:iface][:core] %>;
define iface_mgmt = <%= node[:vpn_router][:iface][:mgmt] %>;

table inet filter {
  chain input {
    type filter hook input priority 0;

    iif lo accept

    ct state {established, related} accept
    ct state invalid drop

    ip protocol icmp accept
    ip6 nexthdr icmpv6 accept
<%- if node[:hocho_ec2] -%>
    udp dport bootpc accept
    tcp dport bootpc accept
    udp dport dhcpv6-client accept
    tcp dport dhcpv6-client accept
<%- end -%>

    jump input_world
    iif $iface_core jump input_core
    iif $iface_mgmt jump input_mgmt
    iifname $iface_remote jump input_remote

    jump input_reject
  }
  chain input_reject {
    iif $iface_world drop
    reject with icmpx type admin-prohibited
  }
  chain input_world {
    udp dport 500 accept
    udp dport 4500 accept
    ip protocol esp accept
    ip6 nexthdr esp accept
    return
  }
  chain input_core {
    ip protocol ospfigp accept
    return
  }
  chain input_mgmt {
    tcp dport $port_ssh accept
    tcp dport {10050, 10051} accept
    return
  }
  chain input_remote {
    ip protocol ospfigp accept
    return
  }


  chain forward {
    type filter hook forward priority 0;

    ct state {established, related} accept
    ct state invalid drop

    iif $iface_core jump forward_core
    iif $iface_mgmt jump forward_mgmt
    iifname $iface_remote jump forward_remote

    jump forward_reject
    drop
  }

  chain forward_core {
    accept
  }
  chain forward_mgmt {
    return
  }
  chain forward_remote {
    accept
  }

  chain forward_reject {
    iif $iface_world drop
    reject with icmpx type admin-prohibited
  }
  chain output {
    type filter hook output priority 0;
    accept
  }
}

# vim:set ts=2 sw=2 et:
